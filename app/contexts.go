// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "GAE Chat API": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/m0a-mystudy/gae-chat/design
// --out=$(GOPATH)/src/github.com/m0a-mystudy/gae-chat
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
	"unicode/utf8"
)

// ShowAccountContext provides the account show action context.
type ShowAccountContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Ids []string
}

// NewShowAccountContext parses the incoming request URL and body, performs validations and creates the
// context used by the account controller show action.
func NewShowAccountContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowAccountContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowAccountContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramIds := req.Params["ids"]
	if len(paramIds) > 0 {
		params := paramIds
		rctx.Ids = params
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowAccountContext) OK(r AccountCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.account+json; type=collection")
	if r == nil {
		r = AccountCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowAccountContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowAccountContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowMeAccountContext provides the account showMe action context.
type ShowMeAccountContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewShowMeAccountContext parses the incoming request URL and body, performs validations and creates the
// context used by the account controller showMe action.
func NewShowMeAccountContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowMeAccountContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowMeAccountContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowMeAccountContext) OK(r *Account) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.account+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowMeAccountContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowMeAccountContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListMessageContext provides the message list action context.
type ListMessageContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name       string
	NextCursor *string
}

// NewListMessageContext parses the incoming request URL and body, performs validations and creates the
// context used by the message controller list action.
func NewListMessageContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListMessageContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListMessageContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
		if ok := goa.ValidatePattern(`[a-z|0-9]+`, rctx.Name); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`name`, rctx.Name, `[a-z|0-9]+`))
		}
		if utf8.RuneCountInString(rctx.Name) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`name`, rctx.Name, utf8.RuneCountInString(rctx.Name), 3, true))
		}
		if utf8.RuneCountInString(rctx.Name) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`name`, rctx.Name, utf8.RuneCountInString(rctx.Name), 20, false))
		}
	}
	paramNextCursor := req.Params["nextCursor"]
	if len(paramNextCursor) > 0 {
		rawNextCursor := paramNextCursor[0]
		rctx.NextCursor = &rawNextCursor
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListMessageContext) OK(r *ResponseMessages) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.response_messages+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListMessageContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// PostMessageContext provides the message post action context.
type PostMessageContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name    string
	Payload *MessagePayload
}

// NewPostMessageContext parses the incoming request URL and body, performs validations and creates the
// context used by the message controller post action.
func NewPostMessageContext(ctx context.Context, r *http.Request, service *goa.Service) (*PostMessageContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PostMessageContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
		if ok := goa.ValidatePattern(`[a-z|0-9]+`, rctx.Name); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`name`, rctx.Name, `[a-z|0-9]+`))
		}
		if utf8.RuneCountInString(rctx.Name) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`name`, rctx.Name, utf8.RuneCountInString(rctx.Name), 3, true))
		}
		if utf8.RuneCountInString(rctx.Name) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`name`, rctx.Name, utf8.RuneCountInString(rctx.Name), 20, false))
		}
	}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *PostMessageContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *PostMessageContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *PostMessageContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// ShowMessageContext provides the message show action context.
type ShowMessageContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	MessageID int
	Name      string
}

// NewShowMessageContext parses the incoming request URL and body, performs validations and creates the
// context used by the message controller show action.
func NewShowMessageContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowMessageContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowMessageContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramMessageID := req.Params["messageID"]
	if len(paramMessageID) > 0 {
		rawMessageID := paramMessageID[0]
		if messageID, err2 := strconv.Atoi(rawMessageID); err2 == nil {
			rctx.MessageID = messageID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("messageID", rawMessageID, "integer"))
		}
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
		if ok := goa.ValidatePattern(`[a-z|0-9]+`, rctx.Name); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`name`, rctx.Name, `[a-z|0-9]+`))
		}
		if utf8.RuneCountInString(rctx.Name) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`name`, rctx.Name, utf8.RuneCountInString(rctx.Name), 3, true))
		}
		if utf8.RuneCountInString(rctx.Name) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`name`, rctx.Name, utf8.RuneCountInString(rctx.Name), 20, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowMessageContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowMessageContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowMessageContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListRoomContext provides the room list action context.
type ListRoomContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Limit  *int
	Offset *int
}

// NewListRoomContext parses the incoming request URL and body, performs validations and creates the
// context used by the room controller list action.
func NewListRoomContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListRoomContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListRoomContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramLimit := req.Params["limit"]
	if len(paramLimit) > 0 {
		rawLimit := paramLimit[0]
		if limit, err2 := strconv.Atoi(rawLimit); err2 == nil {
			tmp3 := limit
			tmp2 := &tmp3
			rctx.Limit = tmp2
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("limit", rawLimit, "integer"))
		}
	}
	paramOffset := req.Params["offset"]
	if len(paramOffset) > 0 {
		rawOffset := paramOffset[0]
		if offset, err2 := strconv.Atoi(rawOffset); err2 == nil {
			tmp5 := offset
			tmp4 := &tmp5
			rctx.Offset = tmp4
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("offset", rawOffset, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListRoomContext) OK(r RoomCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.room+json; type=collection")
	if r == nil {
		r = RoomCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListRoomContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// PostRoomContext provides the room post action context.
type PostRoomContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *RoomPayload
}

// NewPostRoomContext parses the incoming request URL and body, performs validations and creates the
// context used by the room controller post action.
func NewPostRoomContext(ctx context.Context, r *http.Request, service *goa.Service) (*PostRoomContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PostRoomContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *PostRoomContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *PostRoomContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *PostRoomContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// ShowRoomContext provides the room show action context.
type ShowRoomContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name string
}

// NewShowRoomContext parses the incoming request URL and body, performs validations and creates the
// context used by the room controller show action.
func NewShowRoomContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowRoomContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowRoomContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
		if ok := goa.ValidatePattern(`[a-z|0-9]+`, rctx.Name); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`name`, rctx.Name, `[a-z|0-9]+`))
		}
		if utf8.RuneCountInString(rctx.Name) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`name`, rctx.Name, utf8.RuneCountInString(rctx.Name), 3, true))
		}
		if utf8.RuneCountInString(rctx.Name) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`name`, rctx.Name, utf8.RuneCountInString(rctx.Name), 20, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowRoomContext) OK(r *Room) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.room+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowRoomContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowRoomContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
