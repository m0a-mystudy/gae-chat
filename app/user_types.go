// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "GAE Chat API": Application User Types
//
// Command:
// $ goagen
// --design=github.com/m0a-mystudy/gae-chat/design
// --out=$(GOPATH)/src/github.com/m0a-mystudy/gae-chat
// --version=v1.3.0

package app

import (
	"github.com/goadesign/goa"
	"time"
	"unicode/utf8"
)

// messagePayload user type.
type messagePayload struct {
	Auther  *string    `form:"auther,omitempty" json:"auther,omitempty" xml:"auther,omitempty"`
	Content *string    `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	Created *time.Time `form:"created,omitempty" json:"created,omitempty" xml:"created,omitempty"`
}

// Validate validates the messagePayload type instance.
func (ut *messagePayload) Validate() (err error) {
	if ut.Content == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "content"))
	}
	if ut.Auther == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "auther"))
	}
	if ut.Created == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "created"))
	}
	if ut.Content != nil {
		if utf8.RuneCountInString(*ut.Content) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.content`, *ut.Content, utf8.RuneCountInString(*ut.Content), 1, true))
		}
	}
	if ut.Content != nil {
		if utf8.RuneCountInString(*ut.Content) > 400 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.content`, *ut.Content, utf8.RuneCountInString(*ut.Content), 400, false))
		}
	}
	return
}

// Publicize creates MessagePayload from messagePayload
func (ut *messagePayload) Publicize() *MessagePayload {
	var pub MessagePayload
	if ut.Auther != nil {
		pub.Auther = *ut.Auther
	}
	if ut.Content != nil {
		pub.Content = *ut.Content
	}
	if ut.Created != nil {
		pub.Created = *ut.Created
	}
	return &pub
}

// MessagePayload user type.
type MessagePayload struct {
	Auther  string    `form:"auther" json:"auther" xml:"auther"`
	Content string    `form:"content" json:"content" xml:"content"`
	Created time.Time `form:"created" json:"created" xml:"created"`
}

// Validate validates the MessagePayload type instance.
func (ut *MessagePayload) Validate() (err error) {
	if ut.Content == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "content"))
	}
	if ut.Auther == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "auther"))
	}

	if utf8.RuneCountInString(ut.Content) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.content`, ut.Content, utf8.RuneCountInString(ut.Content), 1, true))
	}
	if utf8.RuneCountInString(ut.Content) > 400 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.content`, ut.Content, utf8.RuneCountInString(ut.Content), 400, false))
	}
	return
}

// roomPayload user type.
type roomPayload struct {
	// Date of creation
	Created *time.Time `form:"created,omitempty" json:"created,omitempty" xml:"created,omitempty"`
	// description of room
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Name of room
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// Validate validates the roomPayload type instance.
func (ut *roomPayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.Description == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "description"))
	}
	if ut.Description != nil {
		if utf8.RuneCountInString(*ut.Description) > 400 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.description`, *ut.Description, utf8.RuneCountInString(*ut.Description), 400, false))
		}
	}
	if ut.Name != nil {
		if ok := goa.ValidatePattern(`[a-z|0-9]+`, *ut.Name); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`request.name`, *ut.Name, `[a-z|0-9]+`))
		}
	}
	if ut.Name != nil {
		if utf8.RuneCountInString(*ut.Name) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.name`, *ut.Name, utf8.RuneCountInString(*ut.Name), 3, true))
		}
	}
	if ut.Name != nil {
		if utf8.RuneCountInString(*ut.Name) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.name`, *ut.Name, utf8.RuneCountInString(*ut.Name), 20, false))
		}
	}
	return
}

// Publicize creates RoomPayload from roomPayload
func (ut *roomPayload) Publicize() *RoomPayload {
	var pub RoomPayload
	if ut.Created != nil {
		pub.Created = ut.Created
	}
	if ut.Description != nil {
		pub.Description = *ut.Description
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	return &pub
}

// RoomPayload user type.
type RoomPayload struct {
	// Date of creation
	Created *time.Time `form:"created,omitempty" json:"created,omitempty" xml:"created,omitempty"`
	// description of room
	Description string `form:"description" json:"description" xml:"description"`
	// Name of room
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate validates the RoomPayload type instance.
func (ut *RoomPayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	if ut.Description == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "description"))
	}
	if utf8.RuneCountInString(ut.Description) > 400 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.description`, ut.Description, utf8.RuneCountInString(ut.Description), 400, false))
	}
	if ok := goa.ValidatePattern(`[a-z|0-9]+`, ut.Name); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`type.name`, ut.Name, `[a-z|0-9]+`))
	}
	if utf8.RuneCountInString(ut.Name) < 3 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.name`, ut.Name, utf8.RuneCountInString(ut.Name), 3, true))
	}
	if utf8.RuneCountInString(ut.Name) > 20 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.name`, ut.Name, utf8.RuneCountInString(ut.Name), 20, false))
	}
	return
}
