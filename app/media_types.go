// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "GAE Chat API": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/m0a-mystudy/gae-chat/design
// --out=$(GOPATH)/src/github.com/m0a-mystudy/gae-chat
// --version=v1.3.0

package app

import (
	"github.com/goadesign/goa"
	"time"
	"unicode/utf8"
)

// A account (default view)
//
// Identifier: application/vnd.account+json; view=default
type Account struct {
	// Date of creation
	Created time.Time `form:"created" json:"created" xml:"created"`
	ID      int       `form:"id" json:"id" xml:"id"`
}

// Validate validates the Account media type instance.
func (mt *Account) Validate() (err error) {

	return
}

// A Message (default view)
//
// Identifier: application/vnd.message+json; view=default
type Message struct {
	Auther  string    `form:"auther" json:"auther" xml:"auther"`
	Content string    `form:"content" json:"content" xml:"content"`
	Created time.Time `form:"created" json:"created" xml:"created"`
	ID      int       `form:"id" json:"id" xml:"id"`
}

// Validate validates the Message media type instance.
func (mt *Message) Validate() (err error) {

	if mt.Content == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "content"))
	}
	if mt.Auther == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "auther"))
	}

	if utf8.RuneCountInString(mt.Content) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.content`, mt.Content, utf8.RuneCountInString(mt.Content), 1, true))
	}
	if utf8.RuneCountInString(mt.Content) > 400 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.content`, mt.Content, utf8.RuneCountInString(mt.Content), 400, false))
	}
	return
}

// MessageCollection is the media type for an array of Message (default view)
//
// Identifier: application/vnd.message+json; type=collection; view=default
type MessageCollection []*Message

// Validate validates the MessageCollection media type instance.
func (mt MessageCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// A room (default view)
//
// Identifier: application/vnd.room+json; view=default
type Room struct {
	// Date of creation
	Created time.Time `form:"created" json:"created" xml:"created"`
	// description of room
	Description string `form:"description" json:"description" xml:"description"`
	// Name of room
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate validates the Room media type instance.
func (mt *Room) Validate() (err error) {
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Description == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "description"))
	}

	if utf8.RuneCountInString(mt.Description) > 400 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.description`, mt.Description, utf8.RuneCountInString(mt.Description), 400, false))
	}
	if ok := goa.ValidatePattern(`[a-z|0-9]+`, mt.Name); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`response.name`, mt.Name, `[a-z|0-9]+`))
	}
	if utf8.RuneCountInString(mt.Name) < 3 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.name`, mt.Name, utf8.RuneCountInString(mt.Name), 3, true))
	}
	if utf8.RuneCountInString(mt.Name) > 20 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.name`, mt.Name, utf8.RuneCountInString(mt.Name), 20, false))
	}
	return
}

// RoomCollection is the media type for an array of Room (default view)
//
// Identifier: application/vnd.room+json; type=collection; view=default
type RoomCollection []*Room

// Validate validates the RoomCollection media type instance.
func (mt RoomCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}
